# shallow clone
clone_depth: 10

cache:
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml

os: Visual Studio 2017

environment:
  # Tell msys2 to add mingw64 to the path
  MSYSTEM: MINGW64
  # Tell msys2 to inherit the current directory when starting the shell
  CHERE_INVOKING: 1
  matrix:
    - BUILD_TYPE: mingw

platform:
  - x64
     
branches:
  only:
    - master
    
configuration:
  - Release

install:
  - git submodule update --init --recursive
  - ps: |
          $dependencies = "mingw64/mingw-w64-x86_64-cmake",
                          "mingw64/mingw-w64-x86_64-qt5",
                          "mingw64/mingw-w64-x86_64-curl",
                          "mingw64/mingw-w64-x86_64-SDL2"
          # redirect err to null to prevent warnings from becoming errors
          # workaround to prevent pacman from failing due to cyclical dependencies
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S mingw64/mingw-w64-x86_64-freetype mingw64/mingw-w64-x86_64-fontconfig" 2> $null
          C:\msys64\usr\bin\bash -lc "pacman --noconfirm -S $dependencies" 2> $null

before_build:
  - mkdir %BUILD_TYPE%_build
  - cd %BUILD_TYPE%_build
  - ps: |
          C:\msys64\usr\bin\bash.exe -lc "cmake -G 'MSYS Makefiles' -DUSE_SYSTEM_CURL=1 -DCITRA_USE_BUNDLED_CURL=1 -DCMAKE_BUILD_TYPE=Release .. 2>&1"
  - cd ..

build_script:
  - ps: |
          C:\msys64\usr\bin\bash.exe -lc 'mingw32-make -C mingw_build/ 2>&1'
          
after_build:
  - ps: |
        $GITDATE = $(git show -s --date=short --format='%ad') -replace "-",""
        $GITREV = $(git show -s --format='%h')

          $RELEASE_DIST = "tomodachi-mingw"

          $MINGW_BUILD_ZIP = "citra-windows-mingw-$GITDATE-$GITREV.zip" -replace " ", ""

          # store the build information in env vars so we can use them as artifacts
          $env:BUILD_ZIP = $MINGW_BUILD_ZIP

          $CMAKE_SOURCE_DIR = "$env:APPVEYOR_BUILD_FOLDER"
          $CMAKE_BINARY_DIR = "$CMAKE_SOURCE_DIR/mingw_build"
          
          # store translations paths
          $env:TRANSLATIONQM = "$CMAKE_BINARY_DIR/src/citra-qt/translation.qm"
          $env:TRANSLATIONTS = "$CMAKE_SOURCE_DIR/src/citra-qt/translation.ts"
          
          mkdir $RELEASE_DIST
          mkdir $RELEASE_DIST/platforms

          # copy citra and other release files to the release folder
          Get-ChildItem "$CMAKE_BINARY_DIR" -Recurse -Filter "citra-qt.exe" | Copy-Item -destination $RELEASE_DIST/citra-qt-sse4.1.exe
          Copy-Item -path "$CMAKE_SOURCE_DIR/Text Files/1.ReadMe First.txt" -destination "$RELEASE_DIST/1.ReadMe First.txt"
          Copy-Item -path "$CMAKE_SOURCE_DIR/license.txt" -destination "$RELEASE_DIST/2.license.txt"
          
          # copy the libcurl dll
          Get-ChildItem "$CMAKE_BINARY_DIR" -Recurse -Filter "libcurl.dll" | Copy-Item -destination $RELEASE_DIST
          # copy all the dll dependencies to the release folder
          # hardcoded list because we don't build static and determining the list of dlls from the binary is a pain.
          $MingwDLLs = "Qt5Core.dll","Qt5Widgets.dll","Qt5Gui.dll","Qt5OpenGL.dll",
                       # QT dll dependencies
                       "libbz2-*.dll","libicudt*.dll","libicuin*.dll","libicuuc*.dll","libffi-*.dll",
                       "libfreetype-*.dll","libglib-*.dll","libgobject-*.dll","libgraphite2.dll","libiconv-*.dll",
                       "libharfbuzz-*.dll","libintl-*.dll","libpcre-*.dll","libpcre16-*.dll","libpng16-*.dll",
                       # Runtime/Other dependencies
                       "libgcc_s_seh-*.dll","libstdc++-*.dll","libwinpthread-*.dll","SDL2.dll","zlib1.dll"
          foreach ($file in $MingwDLLs) {
            Copy-Item -path "C:/msys64/mingw64/bin/$file" -force -destination "$RELEASE_DIST"
          }
          # the above list copies a few extra debug dlls that aren't needed (thanks globbing patterns!)
          # so we can remove them by hardcoding another list of extra dlls to remove
          $DebugDLLs = "libicudtd*.dll","libicuind*.dll","libicuucd*.dll"
          foreach ($file in $DebugDLLs) {
            Remove-Item -path "$RELEASE_DIST/$file"
          }

          # copy the qt windows plugin dll to platforms
          Copy-Item -path "C:/msys64/mingw64/share/qt5/plugins/platforms/qwindows.dll" -force -destination "$RELEASE_DIST/platforms"

          7z a -tzip $MINGW_BUILD_ZIP $RELEASE_DIST\*

test_script:
  - cd %BUILD_TYPE%_build
  - ps: |
          C:\msys64\usr\bin\bash.exe -lc "ctest -VV -C Release"
  - cd ..

artifacts:
  - path: $(BUILD_ZIP)
    name: build
    type: zip
  - path: $(TRANSLATIONQM)
    name: translation_qm
  - path: $(TRANSLATIONTS)
    name: translation_ts

deploy:
 - provider: Environment
   name: ghreleases
   on:
     branch: master
